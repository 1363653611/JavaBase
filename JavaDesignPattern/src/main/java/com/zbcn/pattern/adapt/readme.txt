适配器设计模式：
	将一个类的接口转换成客户希望的另外一个接口。
	Adapter模式使得原本由于接口不兼容而不能一起工作的类可以一起工作
1.解决问题：
	可以帮助原本由于接口不兼容而不能一起工作的那些类可以在一起工作。
2.适配器模式中的角色：
	目标接口（target）：客户所期待的接口，可以是抽象类，也可以是具体类。也可以是接口
	需要适配的类（adaptee）：需要适配的类或者适配者类
	适配器（adapter）:包装一个需要适配的对象，把原有的接口包装成目标接口
	
总结：
	优点：
	1.通过适配器，客户端可以调用同一接口，因为对客户端来说是透明的，这样做更加简单，更加直接，更加紧凑
	2.复用了现存的类，解决了现存类和服用环境不一致的问题
	3.将目标类和适配者类解耦。而无需修改现有代码
	4.一个适配器可以把多个不同的适配者类适配到同一个目标，也就是说同一个适配器可以把适配者类和其他的子类都适配
	到目标接口
	缺点：
	对于对象是配器来说，更换适配器的实现过程较复杂
	
	适用场景：
	1.系统需要使用现有的类，而这些类的接口不符合系统的接口
	2.想要建立一些可以服用的类，用于与一些彼此间没有太大关联的类，包括可能在将来能引进的类一起工作
	3.两个类具有相同的功能，但是具有不同接口的时候
	4.旧的系统开发的类已经实现了一些功能，但是客户端却只能以另外一种接口的形式访问，但我们不希望改动原有类
	的时候
	5.使用第三方组件，组件接口定义和自己定义的不同，不希望修改i自己接口但是要使用第三方接口功能
	
	