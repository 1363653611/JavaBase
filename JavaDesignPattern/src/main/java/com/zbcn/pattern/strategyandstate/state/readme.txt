策略设计模式：
	策咯设计模式在实际使用中使用的比较多，适合“状态的切换”。因为我们经常会使用if else if else 进行
	状态的切换，如果针对状态的这样判断切换反复出现，我们就要联想到是否可以采用策略设计模式了。
	
	这里要阐述的是：“开关切换状态”和“一般的状态判断” 是有些区别的，“一般的状态判断” 也有if ... else if 结构。
	
	一般的状态判断：
	if (which==1) state="hello";  
	else if (which==2) state="hi";  
	else if (which==3) state="bye";
	开关切换状态：
	if (state.euqals("bye")) state="hello";  
	else if (state.euqals("hello")) state="hi";  
	else if (state.euqals("hi")) state="bye"; 
	这就是 "开关切换状态”，是将state的状态从"hello"切换到”hi"，再切换到"”bye"，在切换到”hello"，好象一个旋转开关，这种状态改变就可以使用State模式了
	
	
	使用状态模式前，客户端外界需要介入改变状态，而状态改变的实现是琐碎或复杂的。
使用状态模式后，客户端外界可以直接使用事件Event实现，根本不必关心该事件导致如何状态变化，这些是由状态机等内部实现。
这是一种Event-condition-State，状态模式封装了condition-State部分。
每个状态形成一个子类，每个状态只关心它的下一个可能状态，从而无形中形成了状态转换的规则。如果新的状态加入，只涉及它的前一个状态修改和定义。

状态模式的主要优点在于封装了转换规则，并枚举可能的状态，它将所有与某个状态有关的行为放到一个类中，
并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为，
还可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数；
其缺点在于使用状态模式会增加系统类和对象的个数，且状态模式的结构与实现都较为复杂，
如果使用不当将导致程序结构和代码的混乱，对于可以切换状态的状态模式不满足“开闭原则”的要求。