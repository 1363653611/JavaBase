建造者设计模式：
	将负责的对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示
使用范围：
	1.当创建复杂对象的算法应该对立于该对象的组成部分一级他们的装配方式时
	2.当构造过程必须允许被构造的对象有不同的表示时
角色：
	1.builder：为创建一个产品对象的各个部件指定的抽象的接口
	2.ConcreteBuilder：为实现Builder的接口以构造和装配该产品的各个部件，定义并明确他所创建的表示，并提供一个检索产品的接口
	3.Director：构造一个使用builder接口的对象，知道构建过程
	4.product：表示被构建的复杂的对象，ConcreteBuilder创建该产品的内部表示并定义他的装备过程，
	包含定义组成部件的类，包括将这些部件装配成最终产品的接口
	
	建造者模式在使用过程中可以演化出多种形式：
如果具体的被建造对象只有一个的话，可以省略抽象的Builder和Director，让ConcreteBuilder自己扮演指导者和建造者双重角色，
甚至ConcreteBuilder也可以放到Product里面实现。
在《Effective Java》书中第二条，就提到“遇到多个构造器参数时要考虑用构建器”，
其实这里的构建器就属于建造者模式，只是里面把四个角色都放到具体产品里面了