模板方法设计模式：Templete method
	模板方法设计模式，是类的行为的设计模式。
	准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后申明一些抽象方法来迫使子类实现剩余的逻辑。
	不同的子类可以以不同的方式来实现这些抽象方法。不同的子类可以以不同的方式来实现这些抽象的方法。
	
角色：
	抽象类：AbstractClass： 实现了模板方法，定义了算法骨架
	具体类：concreteClass：实现抽象类中的抽象方法，完成完整的算法
	
	example：
	以准备去学校所要做的工作（prepareGotoSchool）为例，假设需要分三步：穿衣服（dressUp），吃早饭（eatBreakfast），带上东西（takeThings）。学生和老师要做得具体事情肯定有所区别。

优点：
	1.模板方法通过把通用不变的行为搬移到超类，除去子类中重复的代码
	2.子类实现算法细节，有助于算法的扩展
	3.通过父类掉要那个子类实现的操作，通过子类扩展增加新的行为，符合“开放-封闭原则”
缺点：
	每个不同的实现都要定义一个子类，这会导致类的个数的增加，设计更加抽象
适用场景：
	在某些类的算法中，用了相同的方法，造成代码的重复
	控制子类扩展，子类必须遵守算法规则

