命令模式：
	将客户端的一个请求传入一个对象，从而是你可用不同的请求对客户进行参数化。用于“行为请求者”与“行为实现者”
	之间解耦。可实现二者之间松耦合。适应变化，分离变化与不变。
	
角色：
	COMMAND
	定义命令的接口，申明执行的方法。
	concreteCommand
	命令接口实现对象，是“虚”的实现，通常会持有接受者，并调用接收者的功能来完成命令要执行的操作。
	Receiver
	接受者，正真执行命令的对象，任何类都可能成为一个接收者，只要他能实现命令要求的功能实现。
	
	invoker
	要求命令对象执行请求，通常会持有命令对象，可以持有很多命令对象，这是客户端整整触发命令并要求
	命令执行相应操作的地方，也就是说相当于使用命令对象的入口。、
	
	client
	
	创建具体命令的对象，并且设置命令对象的接受者。注意，这不是我们常规意义上的客户端，而是在组装
	命令对象和接受者。或许，这个client称之为装配者可能会更好理解。因为正真使用命令的客户端是
	从Invoker来触发执行的。
	
	优点：
		1.降低对象之间的耦合度
		2.新的命令可能很容易的加入到系统中
		3.可以比较容易地设计一个组合命令
		4. 通用同一个方法实现不同功能
	缺点：
		使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都要设计一个具体的命令类
		因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。
		
	适用情况：
		1.系统需要将请求的调用者和请求的接受者解耦，适用调用者和接收者不直接交互
		2.系统需要在不同的时间指定请求，请求排队和执行请求
		3.系统需要支持命令的撤销（Undo）操作和回复（Redo）操作。
		
		
	总结
	1.命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。
	2.每一个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作。
	3.命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。
	4.命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。
	5.命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。
	
	
	
	