1.简单的工厂模式：
	1.SIMPLE FACTORY
	2.FACTORY FACTORY
	3.ABSTRACT FACTORY

	<<设计模式>>一书中是这样描述的：工厂模式文类两类，分别为工厂方法模式和抽象工厂模式。其中，简单工厂模式可以看作是
工厂方法模式的一种
2.工厂方法模式：
	一个抽象的产品类，可以派生出多个具体的产品类
	一个抽象工厂类，可以派生出多个具体的工厂类
	每个具体的工厂类，只能创建一个具体的产品类
3.抽象工厂模式
	多个抽象产品类，每个抽象的产品类可以派生出多个具体的产品类
	一个抽象工厂类，可以派生出多个具体的工厂类
	每个具体的工厂类，可以创建多个具体产品类的实例
	
	区别：
		工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个
		工厂方法模式具体的工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个

4.简单工厂模式：
	
	又称为静态工厂方法。目的很简单：定义一个创建对对象的接口
	
	组成：
		1.工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑，用来创建产品
		2.抽象产品：他一般是指具体产品需要继承的父类或者需要实现的接口
		3.具体产品角色：工厂创建的对象就是此角色的实例。
		
	简单工厂模式的弊端：
		每增加一种新的类型，就要在工厂方法上增加判断逻辑，新增方法。工厂类很被动，我们称其为全能类或者上帝类
		
5.工厂方法模式：
	去掉了简单工厂模式中的工厂方法的静态属性，使得它可以被子类集成。这样在简单工厂模式里集中在工厂方法上的压力可以
	由工厂方法模式里不同的工厂子类来分担
  组成：
  1.抽象工厂角色：工厂方法的核心，它与应用程序无关。具体的工厂角色必须实现接口或者继承父类。
  2.具体的工厂角色：他含有和具体的业务逻辑有关的代码。由应用程序船舰来创建对应具体的产品对象
  3.抽象的产品：具体产品需要继承的父类或者实现的接口
  4.具体的产品角色：具体工厂角色所创建的实例
  
  特点：
  增加了一个抽象的工厂角色，来创建具体对应的工厂，这样不用再修改原有的逻辑，避免了上帝类。
 缺点：
 这样造成类的数量的急剧增加。
 
 6.抽象工厂模式
  
  
	
	
	
		